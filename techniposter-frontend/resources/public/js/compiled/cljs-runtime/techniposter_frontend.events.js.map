{"version":3,"sources":["techniposter_frontend/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","techniposter-frontend.db/default-db","re_frame.core.reg_event_fx","p__41788","p__41789","map__41790","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__41791","cljs.core.nth","db","ajax.core/json-request-format","ajax.core/json-response-format","cljs.core.assoc","p__41795","vec__41796","response","cljs.core.js__GT_clj","p__41799","p__41800","map__41801","vec__41802","id","p__41806","vec__41807","techniposter-frontend.events/reload-response","G__41810","G__41811","G__41812","G__41813","re-frame.core/->interceptor","context","G__41814","re-frame.core/dispatch","p__41815","vec__41816","cljs.core.update","cljs.core/inc","p__41819","vec__41820","cljs.core/dec","p__41823","vec__41824","size","p__41827","vec__41828"],"sourcesContent":["(ns techniposter-frontend.events\n  (:require\n   [ajax.core :as ajax]\n   [day8.re-frame.http-fx]\n   [re-frame.core :refer [reg-event-fx reg-event-db ->interceptor dispatch]]\n   [techniposter-frontend.db :as db]))\n\n(reg-event-db\n :initialize\n (fn [_ _]\n   db/default-db))\n\n(reg-event-fx        ;; <-- note the `-fx` extension\n :request-movies        ;; <-- the event id\n (fn                ;; <-- the handler function\n   [{db :db} [_]]     ;; <-- 1st argument is coeffect, from which we extract db \n\n    ;; we return a map of (side) effects\n   {:http-xhrio {:method          :get\n                 :uri             \"http://localhost:3000/api/movie/all\"\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :params          {:paginateCount (:size db) :paginatePage (:page db)}\n                 :on-success      [:request-movies-success]\n                 :on-failure      [:bad-response]}\n    :db  (assoc db :loading? true)}))\n\n(reg-event-db                   \n  :request-movies-success             \n  (fn\n    [db [_ response]]           ;; destructure the response from the event vector\n    (-> db\n        (assoc :loading? false)\n        (assoc :moviesPagianted (js->clj response)))))\n\n(reg-event-fx        ;; <-- note the `-fx` extension\n :request-movie        ;; <-- the event id\n (fn                ;; <-- the handler function\n   [{db :db} [_ id]]     ;; <-- 1st argument is coeffect, from which we extract db \n\n    ;; we return a map of (side) effects\n   {:http-xhrio {:method          :get\n                 :uri             \"http://localhost:3000/api/movie/get\"\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :params          {:id id}\n                 :on-success      [:request-movie-success]\n                 :on-failure      [:bad-response]}\n    :db  (assoc db :loading? true)}))\n\n(reg-event-db\n :request-movie-success\n (fn\n   [db [_ response]]           ;; destructure the response from the event vector\n   (-> db\n       (assoc :loading? false)\n       (assoc :movie-detail (js->clj response)))))\n\n(def reload-response\n  (->interceptor\n   :id :reload-response\n   :after (fn [context]\n            (dispatch [:request-movies])\n            context)))\n\n(reg-event-db\n :next-page\n [reload-response]\n (fn\n   [db [_]]\n   (update db :page inc)))\n\n(reg-event-db\n :prev-page\n [reload-response]\n (fn\n   [db [_]]\n   (update db :page dec)))\n\n(reg-event-db\n :set-size\n [reload-response]\n (fn [db [_ size]]\n   (assoc db :size size)))\n\n(reg-event-db\n :close-detail\n (fn [db [_ _]]\n   (assoc db :movie-detail nil)))\n"]}