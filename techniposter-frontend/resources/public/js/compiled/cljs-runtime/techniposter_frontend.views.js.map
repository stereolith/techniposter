{"version":3,"sources":["techniposter_frontend/views.cljs"],"mappings":"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","names":["techniposter-frontend.views/poster-list-item","title","id","G__44246","re-frame.core/dispatch","cljs.core/deref","poster_path","G__44247","re-frame.core/subscribe","techniposter-frontend.views/poster-list","items","iter__4529__auto__","s__44249","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__44251","cljs.core/chunk-buffer","i__44250","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44248","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","movie","map__44252","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__44254","techniposter-frontend.views/page-size-select","sizes","page-size","G__44256","js/console.log","cljs.core.map","size","G__44257","cljs.core._EQ_","techniposter-frontend.views/page-widget","page","G__44258","G__44259","G__44260","techniposter-frontend.views/detail-list-item","label","value","techniposter-frontend.views/detail-modal","movie-details","fexpr__44262","G__44263","poster-detail-url","G__44264","techniposter-frontend.views/main-panel","loading?","G__44265","movies","G__44266","G__44267","cljs.core/not","cljs.core/chunk-first"],"sourcesContent":["(ns techniposter-frontend.views\n  (:require\n   [re-frame.core :as re-frame]\n   [techniposter-frontend.subs :as subs]\n   ))\n\n;; poster list\n(defn poster-list-item\n  [title id]\n  [:div.poster-list-item {:id id :on-click #(re-frame/dispatch [:request-movie id])}\n   (let [poster_path (re-frame/subscribe [::subs/get-poster id])]\n     [:img.poster {:src @poster_path}])\n   [:div.title title]])\n\n(defn poster-list\n  [items]\n  [:div.poster-list\n   (for [movie items]\n     (let [{:keys [id title]} movie]\n       (poster-list-item title id)))])\n\n\n;; pagination widget\n(defn page-size-select\n  [sizes]\n  [:div.size-select \"items per page: \"\n   (let [page-size (re-frame/subscribe [::subs/page-size])]\n     (js/console.log @page-size)\n     (map (fn [size]\n            [:span.size-select-item {:on-click #(re-frame/dispatch [:set-size size])\n                                     :class (if (= size @page-size) \"active\" \"\")} size])\n          sizes))])\n\n(defn page-widget\n  []\n  (let [page (re-frame/subscribe [::subs/page])]\n    [:div.page-widget\n     (when (> @page 1)\n       [:input {:type \"button\" :value \"prev\"\n                :on-click #(re-frame/dispatch [:prev-page])}])\n     [:span \"Page \" @page]\n     [:input {:type \"button\" :value \"next\"\n              :on-click #(re-frame/dispatch [:next-page])}]\n     (page-size-select [8 12 20 40])]))\n\n\n;; detail modal\n(defn detail-list-item\n  [label value]\n  [:tr\n   [:td.label (str label \":\")]\n   [:td.value value]])\n\n(defn detail-modal\n  [movie-details]\n  [:div.modal-wrapper {:on-click #((re-frame/dispatch [:close-detail]))}\n   [:div.modal\n    [:div.modal-image\n     (let [poster-detail-url (re-frame/subscribe [::subs/get-poster-detail])]\n       [:img.poster {:src @poster-detail-url}])]\n    [:div.modal-details\n     [:h3 (:title movie-details)]\n     [:table\n      (detail-list-item \"Release Date\" (:release_date movie-details))\n      (detail-list-item \"Rating\" (:vote_average movie-details))\n      (detail-list-item \"Description\" (:overview movie-details))]]]])\n\n;; main view\n(defn main-panel []\n  (let [loading? (re-frame/subscribe [::subs/loading?])\n        movies (re-frame/subscribe [::subs/movies])\n        movie-details (re-frame/subscribe [::subs/movie-detail])]\n    [:div\n     [:h1 \"Movie Posters\"]\n     (page-widget)\n     (when @loading? [:div.loader \"loading\"])\n     (when (not @loading?) (poster-list @movies))\n     (when @movie-details (detail-modal @movie-details))]))\n\n\n"]}